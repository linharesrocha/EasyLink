server:
  port: 8080

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      default-filters:
        - AuthenticationFilter
      routes:
        # Rota de usuários
        - id: user-service-route
          uri: lb://user-service
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: user-service
                fallbackUri: forward:/fallback/service

        # Rota genérica para a API do easylink-service
        - id: easylink-service-api-route
          uri: lb://easylink-service
          predicates:
            - Path=/api/v1/**
          filters:
            - name: CircuitBreaker
              args:
                name: easylink-service
                fallbackUri: forward:/fallback/service

        # Rota de redirecionamento
        - id: easylink-service-redirect-route
          uri: lb://easylink-service
          predicates:
            - Path=/{shortKey:[a-zA-Z0-9]{8}}
          filters:
            - name: CircuitBreaker
              args:
                name: easylink-service
                fallbackUri: forward:/fallback/service
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/

# Resilience4j
resilience4j.circuitbreaker:
  instances:
    # Disjuntor para o serviço de links
    easylink-service:
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 10
      failureRateThreshold: 50
      waitDurationInOpenState: 15s
      permittedNumberOfCallsInHalfOpenState: 2
      automaticTransitionFromOpenToHalfOpenEnabled: true

    # Disjuntor para o serviço de usuários
    user-service:
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 10
      failureRateThreshold: 50
      waitDurationInOpenState: 15s
      permittedNumberOfCallsInHalfOpenState: 2
      automaticTransitionFromOpenToHalfOpenEnabled: true

api:
  security:
    token:
      secret: meu-secret-super-secreto-para-gerar-tokens-do-easylink