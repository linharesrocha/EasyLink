services:
  # 1. Serviços de Infraestrutura Base (Bancos de Dados e Cache)
  postgres-db:
    image: postgres:15-alpine
    container_name: easylink-postgres-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=easylink_user
      - POSTGRES_PASSWORD=easylink_password
      - POSTGRES_DB=easylink_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U easylink_user -d easylink_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  user-postgres-db:
    image: postgres:15-alpine
    container_name: easylink-user-postgres-db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=user_db_user
      - POSTGRES_PASSWORD=user_db_password
      - POSTGRES_DB=user_db
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_db_user -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mongo-db:
    image: mongo:7.0
    container_name: easylink-mongo-db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=rootpassword
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis-cache:
    image: redis:7-alpine
    container_name: easylink-redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # 2. Mensageria (Kafka e Zookeeper)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo ruok | nc localhost 2181
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:29092 --list 1>/dev/null"]
      interval: 15s
      timeout: 10s
      retries: 10
    restart: always

  # 3. Service Discovery
  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    restart: unless-stopped

  # 4. API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      discovery-service:
        condition: service_started
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      API_SECURITY_TOKEN_SECRET: ${API_JWT_SECRET_KEY:-meu-secret-super-secreto-para-gerar-tokens-do-easylink}
    restart: unless-stopped

  # 5. Microsserviços da Aplicação
  easylink-service:
    build:
      context: ./easylink-service
      dockerfile: Dockerfile
    container_name: easylink-service
    ports:
      - "8081:8081"
    depends_on:
      discovery-service:
        condition: service_started
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/easylink_db
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATA_REDIS_HOST: redis-cache
    restart: unless-stopped

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8083:8083"
    depends_on:
      discovery-service:
        condition: service_started
      user-postgres-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-postgres-db:5432/user_db
      SPRING_DATASOURCE_USERNAME: user_db_user
      SPRING_DATASOURCE_PASSWORD: user_db_password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      API_SECURITY_TOKEN_SECRET: ${API_JWT_SECRET_KEY:-meu-secret-super-secreto-para-gerar-tokens-do-easylink}
    restart: unless-stopped

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    ports:
      - "8082:8082"
    depends_on:
      discovery-service:
        condition: service_started
      kafka:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATA_MONGODB_URI: mongodb://root:rootpassword@mongo-db:27017/analytics_db?authSource=admin
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  user_postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local